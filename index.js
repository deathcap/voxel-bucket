// Generated by CoffeeScript 1.7.0
(function() {
  var BucketPlugin, ItemPile;

  ItemPile = require('itempile');

  module.exports = function(game, opts) {
    return new BucketPlugin(game, opts);
  };

  BucketPlugin = (function() {
    function BucketPlugin(game, opts) {
      var _ref;
      this.game = game;
      this.opts = opts;
      this.registry = (function() {
        if ((_ref = this.game.plugins.get('voxel-registry')) != null) {
          return _ref;
        } else {
          throw new Error('voxel-bucket requires voxel-registry plugin');
        }
      }).call(this);
      if (opts.fluids == null) {
        opts.fluids = ['water', 'lava'];
      }
      this.fluidBuckets = {};
      if (opts.registerBlocks == null) {
        opts.registerBlocks = true;
      }
      if (opts.registerItems == null) {
        opts.registerItems = true;
      }
      if (opts.registerRecipes == null) {
        opts.registerRecipes = true;
      }
      this.enable();
    }

    BucketPlugin.prototype.enable = function() {
      var bucketName, fluid, ucfirst, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (this.opts.registerItems) {
        this.registry.registerItem('bucket', {
          itemTexture: 'i/bucket_empty',
          onUse: this.pickupFluid.bind(this),
          displayName: 'Empty Bucket'
        });
        ucfirst = function(s) {
          return s.substr(0, 1).toUpperCase() + s.substring(1);
        };
        _ref = this.opts.fluids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fluid = _ref[_i];
          bucketName = "bucket" + (ucfirst(fluid));
          this.registry.registerItem(bucketName, {
            itemTexture: "i/bucket_" + fluid,
            fluid: fluid,
            containerItem: 'bucket',
            onUse: this.placeFluid.bind(this, fluid),
            displayName: "" + (ucfirst(fluid)) + " Bucket"
          });
          this.fluidBuckets[fluid] = bucketName;
        }
      }
      if (this.opts.registerBlocks) {
        _ref1 = this.opts.fluids;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          fluid = _ref1[_j];
          this.registry.registerBlock(fluid, {
            texture: "" + fluid + "_still",
            fluid: fluid
          });
        }
      }
      if (this.opts.registerRecipes) {
        this.recipes = (function() {
          if ((_ref2 = this.game.plugins.get('voxel-recipes')) != null) {
            return _ref2;
          } else {
            throw new Error('voxel-bucket requires voxel-recipes plugin when opts.registerRecipes enabled');
          }
        }).call(this);
        return this.recipes.registerPositional([['ingotIron', void 0, 'ingotIron'], ['ingotIron', 'ingotIron', 'ingotIron'], [void 0, void 0, void 0]], new ItemPile('bucket'));
      }
    };

    BucketPlugin.prototype.disable = function() {};

    BucketPlugin.prototype.pickupFluid = function(held, target) {
      var fluid, fluidBucket, name, props;
      console.log('pickupFluid', held, target);
      if (!target) {
        return;
      }
      name = this.registry.getBlockName(target.value);
      props = this.registry.getBlockProps(name);
      if (props == null) {
        return;
      }
      fluid = props.fluid;
      if (!fluid) {
        return;
      }
      fluidBucket = this.fluidBuckets[fluid];
      if (!fluidBucket) {
        return;
      }
      this.game.setBlock(target.voxel, 0);
      return new ItemPile(fluidBucket);
    };

    BucketPlugin.prototype.placeFluid = function(fluid, held, target) {
      var fluidIndex;
      console.log('placeFluid', fluid, held, target);
      if (!target) {
        return;
      }
      fluidIndex = this.registry.getBlockID(fluid);
      if (fluidIndex == null) {
        return;
      }
      this.game.setBlock(target.adjacent, fluidIndex);
      return new ItemPile('bucket');
    };

    return BucketPlugin;

  })();

}).call(this);
